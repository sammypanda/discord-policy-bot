import database
import os
import discord
from discord.ext import commands
from dotenv import load_dotenv

load_dotenv() # import dotenv values

class ManagerModel:
    def __init__(self):
        self.cur = database.cursor()
        # TODO: run checks to see if important env variables are set/set defaults
        self.intents = discord.Intents.all() # declare that the bot can do anything it wants!
        self.bot = commands.Bot(command_prefix='!', intents=self.intents) # bot instantiate/config

    def get_bot(self):
        return self.bot

    def run_bot(self):
        @self.bot.event
        async def on_ready():
            if int(os.getenv('DEBUG_LEVEL')) >= 1:
                print("debug: on_ready() ran")
                print(self.test_query())

        self.bot.run(os.getenv('BOT_TOKEN'))

    def commands(self):
        @self.bot.hybrid_command()
        async def objects(ctx, section=""): # output to discord chat the objects in Context
            if (section == "" or section == "ctx"):
                await ctx.reply(f"ctx objects: {dir(ctx)}") # using ctx.respond apparently isn't valid with update
            else:
                await ctx.reply(f"object not found")

        @self.bot.hybrid_command()
        async def query(ctx):
            await ctx.reply(f"guilds db query: {self.manager_model.test_query()}")

        @self.bot.hybrid_command()
        async def setup(ctx):
            failed = False
            
            try:
                await ctx.guild.create_text_channel("setup", reason="auto-generated by the policy bot", position=0, topic="Channel for configuring the loaded policies!")
            except Exception as e:
                await ctx.reply(f"Unable to generate setup channel: {e}")
                failed = True
            finally:
                if not failed:
                    await ctx.reply(f"Generated setup channel!")

    def test_query(self): # Just outputs all in guilds table
        self.cur.execute("SELECT * FROM guilds")

        # Retrieve query results
        records = self.cur.fetchall()

        return records